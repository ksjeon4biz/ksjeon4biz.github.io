---
layout: post
title:  "MSA 모델링"
date:   2024-08-11 17:40:00 +0900
categories: architecture
---

MSA(Microservices Architecture)는 소프트웨어 설계 방법론 중 하나로, 애플리케이션을 여러 개의 독립적인 서비스로 나누어 개발, 배포, 운영하는 방식을 말합니다. 각 서비스는 특정 도메인이나 기능을 담당하며, 서로 독립적으로 배포 및 확장이 가능합니다. MSA는 대규모 시스템에서 유연성과 확장성을 제공하며, 팀 단위로 빠르게 기능을 개발하고 배포할 수 있는 장점이 있습니다.

## MSA를 적용한 Application Architecture Modeling
MSA를 기반으로 애플리케이션 아키텍처를 설계하는 과정에서는 다음과 같은 중요한 요소들을 고려합니다:

### 1. 도메인 분리(Domain-Driven Design):

* 시스템을 여러 개의 도메인으로 분리하여 각 도메인이 독립적인 마이크로서비스로 구현됩니다.
* 도메인 주도 설계(DDD)를 적용하여 각 마이크로서비스의 경계를 명확히 하고, 이를 기반으로 서비스가 독립적으로 동작할 수 있게 설계합니다.

### 2. 서비스 설계(Service Design):

* 각 서비스는 작고 독립적이어야 하며, 특정 비즈니스 기능을 캡슐화합니다.
* 서비스 간의 통신은 보통 REST API, 메시지 큐, gRPC 등을 통해 이루어지며, 서비스 간의 결합도를 최소화하여 독립성을 유지합니다.

### 3. 데이터베이스 분리(Database per Service):

* 각 마이크로서비스는 자체 데이터베이스를 가질 수 있으며, 서비스 간 데이터 공유는 데이터베이스를 직접 참조하기보다는 API나 이벤트 기반 메시징 시스템을 통해 이루어집니다.
* 이를 통해 데이터베이스의 스키마가 서비스에 종속되지 않고, 서비스의 독립성과 확장성을 유지할 수 있습니다.

### 4. 서비스 간 통신(Inter-Service Communication):

* 서비스 간 통신 방식은 동기(HTTP/REST) 또는 비동기(메시지 큐, 이벤트 스트리밍)로 설계될 수 있습니다.
* 비동기 통신은 시스템의 확장성과 복원력을 높일 수 있으며, 특히 이벤트 기반 아키텍처가 선호됩니다.

### 5. API Gateway:

* 클라이언트와 내부 마이크로서비스 간의 인터페이스를 단일화하기 위해 API Gateway를 사용합니다.
* API Gateway는 요청을 라우팅하고, 인증, 로깅, 로드 밸런싱 등의 부가 기능을 제공합니다.

### 6. 컨테이너화(Containerization) 및 오케스트레이션(Orchestration):

* 마이크로서비스를 컨테이너화하여 독립적으로 배포하고 실행할 수 있습니다. Docker와 같은 도구를 사용하여 서비스의 배포를 자동화하고, Kubernetes를 사용해 서비스의 오케스트레이션을 관리할 수 있습니다.
* 이를 통해 서비스 확장, 복구, 배포가 유연하고 효율적으로 이루어집니다.

### 7. 지속적 통합 및 배포(CI/CD):

* MSA에서는 각 서비스가 독립적으로 배포될 수 있으므로, CI/CD 파이프라인을 구축하여 지속적으로 통합하고 배포할 수 있는 환경을 마련해야 합니다.
* 테스트 자동화, 코드 품질 관리, 배포 자동화를 통해 개발 속도를 높이고, 배포 리스크를 줄일 수 있습니다.

### 8. 모니터링 및 로깅(Monitoring & Logging):

* 분산된 서비스 아키텍처에서 성능 문제나 장애를 추적하기 위해 모니터링 및 로깅 시스템이 필수적입니다.
* Prometheus, ELK 스택(Elasticsearch, Logstash, Kibana), Grafana 같은 도구들이 사용되며, 서비스 메트릭, 로그 수집, 트랜잭션 추적 등을 통해 시스템의 상태를 실시간으로 모니터링합니다.

### 9. 보안(Security):

* 각 마이크로서비스는 독립적이므로 서비스 간의 보안 문제가 중요합니다. OAuth, JWT 등을 사용한 인증 및 권한 부여, 데이터 암호화, 네트워크 보안 등이 필요합니다.

## MSA의 장점
* 유연성: 서비스가 독립적으로 배포 및 확장 가능하여 변화에 신속하게 대응할 수 있습니다.
* 확장성: 각 서비스의 필요에 따라 독립적으로 확장 가능하며, 자원을 효율적으로 사용할 수 있습니다.
* Fault Isolation: 하나의 서비스 장애가 전체 시스템에 영향을 주지 않도록 설계할 수 있습니다.

## MSA의 단점
* 복잡성 증가: 서비스 간 통신, 데이터 일관성 관리, 배포 및 모니터링 등 시스템 복잡도가 높아집니다.
* 통합 테스트 어려움: 독립적인 서비스들 간의 상호작용을 테스트하는 것이 어려울 수 있습니다.
* 네트워크 부하: 서비스 간의 빈번한 통신으로 인해 네트워크 부하가 증가할 수 있습니다.

이와 같이, MSA를 적용한 애플리케이션 아키텍처 모델링은 유연성과 확장성을 높이는 데 초점을 맞추지만, 그만큼 관리해야 할 요소들이 많아지는 것을 의미합니다. 성공적인 MSA 적용을 위해서는 도메인 설계, 데이터 관리, 배포 자동화, 모니터링 등의 요소를 철저하게 계획하고 실행해야 합니다.