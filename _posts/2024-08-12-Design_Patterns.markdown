---
layout: post
title:  "디자인패턴"
date:   2024-08-12 23:20:00 +0900
categories: architecture
---

가장 많이 사용되는 소프트웨어 디자인 패턴에는 여러 가지가 있지만, 일반적으로 널리 사용되는 몇 가지 주요 디자인 패턴들은 다음과 같습니다:

1. ### Singleton Pattern (싱글톤 패턴):
인스턴스가 오직 하나만 생성되도록 보장하는 패턴입니다. 주로 공통된 자원에 대한 접근을 제한하거나, 설정 관리, 로깅 등에서 사용됩니다.

1. ### Factory Pattern (팩토리 패턴):
객체 생성을 캡슐화하여 클라이언트 코드로부터 분리하는 패턴입니다. 팩토리 메서드를 통해 객체를 생성하고 반환합니다.

1. ### Observer Pattern (옵저버 패턴):
객체 간의 일대다 종속 관계를 정의하여, 하나의 객체의 상태 변화가 다른 객체들에게 자동으로 통지되도록 하는 패턴입니다. 주로 이벤트 처리와 GUI 프로그래밍에서 사용됩니다.

1. ### Strategy Pattern (전략 패턴):
알고리즘군을 정의하고 각각을 캡슐화하여 서로 교환할 수 있게 만드는 패턴입니다. 실행 중에 알고리즘을 선택할 수 있는 유연성을 제공합니다.

1. ### Decorator Pattern (데코레이터 패턴):
객체에 추가적인 기능을 동적으로 더할 수 있게 해주는 패턴입니다. 상속을 사용하지 않고 객체에 새로운 기능을 추가할 수 있습니다.

1. ### Adapter Pattern (어댑터 패턴):
호환되지 않는 인터페이스를 함께 동작할 수 있도록 변환하는 패턴입니다. 기존의 클래스를 수정하지 않고, 클라이언트 클래스가 사용할 수 있게 해줍니다.

1. ### Facade Pattern (퍼사드 패턴):
복잡한 서브시스템을 간단한 인터페이스로 제공하여 클라이언트가 쉽게 사용할 수 있게 하는 패턴입니다. 외부 시스템과의 통합에서 유용하게 사용될 수 있습니다.

1. ### Iterator Pattern (반복자 패턴):
컬렉션의 내부 구조를 노출하지 않고 순차적으로 접근할 수 있는 방법을 제공하는 패턴입니다. 데이터 구조의 순회에 사용됩니다.

1. ### Template Method Pattern (템플릿 메서드 패턴):
알고리즘의 뼈대를 정의하고 각 단계를 서브클래스에서 구현할 수 있도록 하는 패턴입니다. 알고리즘의 일부를 서브클래스로 분리하여 재사용성을 높입니다.

1. ### Composite Pattern (컴포지트 패턴):
객체들을 트리 구조로 구성하여 단일 객체와 객체의 컬렉션을 동일하게 다룰 수 있는 패턴입니다. 계층 구조를 표현하는 데 유용합니다.

이 외에도 많은 다른 디자인 패턴들이 있으며, 이들은 각기 다른 상황에서 특정 문제를 해결하기 위해 사용됩니다. 디자인 패턴은 소프트웨어 설계에서 일반적인 문제들에 대한 해결책을 제공하고, 코드의 유지보수성, 확장성, 유연성을 개선하는 데 도움을 줍니다.

