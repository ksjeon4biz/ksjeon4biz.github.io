---
layout: post
title:  "gRPC"
date:   2024-08-11 16:53:00 +0900
categories: architecture
---

gRPC는 Google에서 개발한 오픈 소스 원격 프로시저 호출(Remote Procedure Call, RPC) 시스템입니다. gRPC는 클라이언트와 서버 간의 통신을 단순화하고 효율적으로 만들어 주는 고성능, 범용 RPC 프레임워크로, 다양한 언어와 플랫폼에서 사용할 수 있습니다.

## 주요 특징:
1. 프로토콜 버퍼(Protocol Buffers):
    * gRPC는 메시지 직렬화 방식으로 Google의 Protocol Buffers(프로토콜 버퍼)를 사용합니다. 프로토콜 버퍼는 직렬화된 데이터를 매우 효율적으로 인코딩하며, JSON이나 XML보다 더 작고 빠른 메시지를 생성합니다.
    * 서비스 및 메시지 형식은 .proto 파일에 정의되며, 이 파일을 컴파일하여 다양한 언어에서 사용할 수 있는 코드가 생성됩니다.

1. 다양한 언어 지원:
    * gRPC는 C++, Java, Python, Go, Node.js, Ruby, C#, PHP 등 다양한 프로그래밍 언어를 지원합니다. 이를 통해 클라이언트와 서버가 서로 다른 언어로 구현된 환경에서도 원활하게 통신할 수 있습니다.

1. HTTP/2 기반:
    * gRPC는 HTTP/2를 사용하여 통신합니다. HTTP/2의 특징인 멀티플렉싱, 스트리밍, 헤더 압축, 양방향 통신 등을 활용하여 성능과 효율성을 극대화할 수 있습니다.
    * HTTP/2의 멀티플렉싱을 통해 단일 TCP 연결에서 여러 메시지를 동시에 주고받을 수 있어 성능이 크게 향상됩니다.

1. 스트리밍 지원:
    * gRPC는 단순한 요청-응답 방식뿐만 아니라 스트리밍을 통한 데이터 전송을 지원합니다.
        * 단방향 스트리밍: 클라이언트가 서버로 하나의 요청을 보내고, 서버는 여러 응답을 스트림 형태로 반환할 수 있습니다.
        * 양방향 스트리밍: 클라이언트와 서버가 서로 동시에 데이터를 스트리밍할 수 있습니다.

1. 로드 밸런싱, 인증, 메타데이터:
    * gRPC는 기본적으로 로드 밸런싱, 인증 및 메타데이터 전송 기능을 지원합니다. 이를 통해 서비스 간의 통신을 더욱 안전하고 안정적으로 유지할 수 있습니다.

1. 플러그인 및 확장성:
    * gRPC는 인터셉터를 사용하여 호출 전후에 특정 작업을 수행할 수 있으며, 다양한 플러그인을 사용해 기능을 확장할 수 있습니다.

## gRPC의 장점:
* 고성능: 프로토콜 버퍼와 HTTP/2를 사용하여 데이터 전송 속도와 효율성이 매우 뛰어납니다.
* 다양한 언어 및 플랫폼 지원: 다양한 언어에서 쉽게 사용할 수 있어 이종 시스템 간의 통합이 용이합니다.
* 풍부한 기능: 스트리밍, 인증, 로드 밸런싱 등 다양한 고급 기능을 기본 제공하여 복잡한 서비스 아키텍처를 구축할 수 있습니다.

## gRPC의 단점:
* 학습 곡선: RESTful API에 비해 상대적으로 복잡하여 처음 도입 시 학습 곡선이 있을 수 있습니다.
* 브라우저 호환성: gRPC는 브라우저에서 직접적으로 사용하기 어렵고, gRPC-Web과 같은 추가적인 구현이 필요합니다.
* 텍스트 기반 통신의 부재: JSON과 같은 텍스트 기반 메시지를 주고받는 RESTful API에 비해 디버깅이 더 어려울 수 있습니다.

gRPC는 고성능, 확장성, 다중 언어 지원이 중요한 대규모 시스템에서 특히 유용하며, 서비스 간 통신의 표준으로 널리 사용되고 있습니다.

## gRPC의 사용 예시:
1. 프로젝트 설정

    gRPC Java 프로젝트를 설정하려면 Gradle 또는 Maven을 사용합니다. 여기서는 Gradle을 예로 들겠습니다.

    build.gradle 설정
    
```groovy
plugins {
    id 'java'
    id 'com.google.protobuf' version '0.9.2'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'io.grpc:grpc-netty-shaded:1.58.0'
    implementation 'io.grpc:grpc-protobuf:1.58.0'
    implementation 'io.grpc:grpc-stub:1.58.0'

    compileOnly 'org.apache.tomcat:annotations-api:6.0.53'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    testImplementation 'junit:junit:4.13.2'
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.24.3'
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.58.0'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                grpc {}
            }
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/java', 'build/generated/source/proto/main/grpc'
        }
    }
}
```

1. .proto 파일 작성

    src/main/proto/helloworld.proto 파일을 작성하여 gRPC 서비스를 정의합니다.

```proto
syntax = "proto3";

option java_package = "com.example.grpc";
option java_outer_classname = "HelloWorldProto";

service Greeter {
    rpc SayHello (HelloRequest) returns (HelloReply);
}

message HelloRequest {
    string name = 1;
}

message HelloReply {
    string message = 1;
}
```

1. 코드 생성

    Gradle을 사용해 proto 파일을 컴파일하여 Java 코드를 생성합니다.

```bash
gradle build
```
    이 명령을 실행하면 build/generated/source/proto/main/java 및 build/generated/source/proto/main/grpc 디렉토리에 필요한 gRPC 및 Protocol Buffers 코드가 생성됩니다.

1. 서버 구현

    서버에서 gRPC 서비스를 구현하는 클래스를 작성합니다.

```java
package com.example.grpc;

import io.grpc.Server;
import io.grpc.ServerBuilder;
import io.grpc.stub.StreamObserver;

import java.io.IOException;

public class HelloWorldServer {

    public static void main(String[] args) throws IOException, InterruptedException {
        Server server = ServerBuilder.forPort(50051)
                .addService(new GreeterImpl())
                .build();

        System.out.println("Starting server...");
        server.start();
        System.out.println("Server started on port 50051");

        server.awaitTermination();
    }

    static class GreeterImpl extends HelloWorldProto.GreeterGrpc.GreeterImplBase {
        @Override
        public void SayHello(HelloWorldProto.HelloRequest request, StreamObserver<HelloWorldProto.HelloReply> responseObserver) {
            String greeting = "Hello, " + request.getName();
            HelloWorldProto.HelloReply reply = HelloWorldProto.HelloReply.newBuilder()
                    .setMessage(greeting)
                    .build();

            responseObserver.onNext(reply);
            responseObserver.onCompleted();
        }
    }
}
```

1. 클라이언트 구현

    클라이언트에서 서버에 요청을 보내는 코드를 작성합니다.

```java
package com.example.grpc;

import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;

public class HelloWorldClient {

    public static void main(String[] args) {
        ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 50051)
                .usePlaintext()
                .build();

        HelloWorldProto.GreeterGrpc.GreeterBlockingStub stub = HelloWorldProto.GreeterGrpc.newBlockingStub(channel);

        HelloWorldProto.HelloRequest request = HelloWorldProto.HelloRequest.newBuilder()
                .setName("World")
                .build();

        HelloWorldProto.HelloReply response = stub.SayHello(request);

        System.out.println("Received: " + response.getMessage());

        channel.shutdown();
    }
}
```

1. 서버 및 클라이언트 실행

    먼저 서버를 실행합니다.

```bash
gradle run -PmainClass=com.example.grpc.HelloWorldServer
```

    그다음 클라이언트를 실행하여 서버에 요청을 보냅니다.

```bash
gradle run -PmainClass=com.example.grpc.HelloWorldClient
```

1. 결과

    클라이언트가 "World"라는 이름을 서버에 요청으로 보내면, 서버는 "Hello, World"라는 응답을 반환합니다. 콘솔에서 다음과 같은 출력을 확인할 수 있습니다.

```makefile
Received: Hello, World
```

## 요약
이 예제에서는 Java에서 gRPC를 사용하여 간단한 "Hello World" 서비스를 구현했습니다. gRPC는 성능이 우수하고 다양한 언어를 지원하며, 이 예제는 gRPC의 기본적인 사용법을 이해하는 데 도움이 됩니다.

