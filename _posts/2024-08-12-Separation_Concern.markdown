---
layout: post
title:  "관심사의 분리 (Separation of Concerns, SoC)"
date:   2024-08-12 22:30:00 +0900
categories: architecture
---

"관심사의 분리" (Separation of Concerns, SoC)은 소프트웨어 공학 및 아키텍처에서 소프트웨어 시스템을 각각의 관심사나 측면을 다루는 구분된 섹션으로 조직화하는 기본 원칙입니다. 이 접근 방식은 소프트웨어의 유지보수성, 확장성 및 이해도를 향상시킵니다. 다음은 이에 대한 자세한 설명입니다:

### 관심사의 분리 주요 개념
1. #### 모듈화:
시스템을 각 모듈이 특정 기능을 담당하는 모듈로 나눕니다.
모듈은 느슨하게 결합되고 높은 응집성을 가져야 합니다.
예: 웹 애플리케이션에서 사용자 인증, 데이터 액세스, 비즈니스 로직, 사용자 인터페이스를 각각 별도의 모듈로 분리합니다.

1. #### 캡슐화:
각 모듈 또는 컴포넌트는 내부 세부 사항을 숨기고, 다른 부분이 상호 작용하는 데 필요한 부분만 공개합니다.
캡슐화는 의존성을 줄이고, 시스템의 특정 부분을 변경해도 다른 부분에 영향을 주지 않도록 합니다.

1. #### 추상화:
복잡한 하위 시스템에 대해 간단한 인터페이스를 제공합니다.
추상화는 세부 구현에 얽매이지 않고 고수준의 기능에 집중할 수 있게 합니다.
예: 비즈니스 로직에서 직접 SQL 쿼리를 작성하는 대신, API를 사용해 데이터베이스와 상호 작용합니다.

1. #### 책임 할당:
각 모듈이나 컴포넌트가 무엇을 담당하는지 명확히 정의합니다.
책임이 중복되지 않도록 하여 복잡한 상호 의존성과 유지보수 문제를 방지합니다.

### 관심사의 분리 이점
1. #### 향상된 유지보수성:
관련 없는 컴포넌트에 영향을 주지 않고 시스템의 특정 부분을 업데이트, 수정 또는 개선하기가 용이합니다.
코드베이스를 더 잘 읽고 이해할 수 있습니다.

1. #### 재사용성 향상:
특정 관심사를 위해 설계된 컴포넌트는 시스템의 다른 부분이나 다른 프로젝트에서 재사용할 수 있습니다.

1. #### 테스트 간소화:
개별 컴포넌트나 모듈을 테스트하는 것이 더 용이합니다.
잘 정의된 모듈로 단위 테스트를 더 효과적으로 수행할 수 있습니다.

1. #### 병렬 개발:
서로 다른 팀이 각기 다른 관심사를 동시에 작업할 수 있어 개발 속도가 빨라집니다.
개발 일정이 단축됩니다.

### 애플리케이션 아키텍처의 예
1. #### MVC 아키텍처:
**모델-뷰-컨트롤러 (MVC)**는 SoC의 고전적인 예입니다.
* 모델: 데이터 및 비즈니스 로직 관리.
* 뷰: 프리젠테이션 레이어 관리.
* 컨트롤러: 사용자 입력을 관리하고 모델과 뷰를 업데이트.

1. #### 마이크로서비스 아키텍처:
각 마이크로서비스는 특정 비즈니스 기능을 담당합니다.
서비스는 독립적으로 배포 및 확장할 수 있습니다.
예: 전자상거래 애플리케이션에서 사용자 관리, 재고, 결제 처리 등을 각각의 마이크로서비스로 분리.

1. #### 계층형 아키텍처:
시스템을 각각의 책임을 가진 계층으로 나눕니다.
* 프리젠테이션 계층: 사용자 인터페이스.
* 비즈니스 로직 계층: 핵심 애플리케이션 기능.
* 데이터 액세스 계층: 데이터베이스와의 상호작용.
* 인프라 계층: 로깅, 네트워크 통신 등 저수준 작업.

### 실용적 구현 전략
1. #### 디자인 패턴 사용:
옵서버, 전략, 팩토리와 같은 패턴을 사용하여 SoC를 구현합니다.
명확한 역할 정의와 상호 작용 프로토콜을 촉진합니다.

1. #### 명확한 인터페이스 정의:
다른 관심사 간의 상호 작용을 위해 인터페이스나 API를 정의합니다.
시스템의 한 부분에 대한 변경이 전체 코드베이스에 영향을 미치지 않도록 합니다.

1. #### 일관된 코드 조직화:
코드 조직을 관심사에 따라 디렉터리와 파일로 구분하는 일관된 구조를 따릅니다.
예: MVC 애플리케이션에서 컨트롤러, 서비스, 모델, 뷰를 각각 별도의 디렉터리로 구분.

1. #### 의존성 주입:
의존성 주입 프레임워크를 사용하여 컴포넌트 간의 의존성을 관리합니다.
의존성 주입은 느슨한 결합을 촉진하고, 의존성을 하드코딩하지 않고 주입하여 더 쉽게 테스트할 수 있게 합니다.

### 결론
관심사의 분리 원칙은 견고하고 유지보수가 쉬우며 확장 가능한 소프트웨어 시스템을 설계하는 데 필수적입니다. 책임을 명확히 구분하고 의존성을 최소화함으로써, SoC는 시간이 지나도 이해하고 테스트하며 발전시키기 쉬운 시스템을 구축하는 데 도움을 줍니다. 이 원칙은 많은 아키텍처 패턴과 모범 사례의 기초가 되어 효과적인 소프트웨어 설계의 핵심이 됩니다.