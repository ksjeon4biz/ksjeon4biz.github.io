---
layout: post
title:  "쿠버네티스"
date:   2024-08-12 22:10:00 +0900
categories: architecture
---

쿠버네티스(Kubernetes, 또는 K8s)는 컨테이너화된 애플리케이션의 배포, 스케일링, 관리, 운영을 자동화하는 오픈 소스 플랫폼입니다. 구글이 개발하고 CNCF(Cloud Native Computing Foundation)가 관리하는 이 시스템은 복잡한 컨테이너 기반 환경을 효율적으로 관리할 수 있게 도와줍니다.

### 주요 개념
1. #### 컨테이너화 (Containerization):
애플리케이션과 그 종속성을 패키징하여 일관된 실행 환경을 제공하는 기술입니다. Docker가 널리 사용되는 컨테이너화 플랫폼입니다.

1. #### 클러스터 (Cluster):
쿠버네티스는 여러 서버(노드)로 구성된 클러스터에서 실행됩니다. 클러스터는 여러 컨테이너를 호스팅하고 관리하는 노드들로 구성됩니다.

1. #### 노드 (Node):
클러스터를 구성하는 개별 서버입니다. 각 노드는 컨테이너를 실행할 수 있는 물리적 또는 가상 머신일 수 있습니다.
노드는 두 가지 주요 유형이 있습니다:
    * 마스터 노드: 클러스터의 상태를 관리하고, 작업을 스케줄링합니다.
    * 워커 노드: 애플리케이션 컨테이너를 실행하는 실제 노드입니다.

1. #### 포드 (Pod):
쿠버네티스에서 컨테이너의 기본 실행 단위입니다. 포드는 하나 이상의 컨테이너를 포함할 수 있으며, 동일한 네트워크와 저장소를 공유합니다.

1. #### 서비스 (Service):
포드들 간의 네트워크 접근을 추상화합니다. 서비스는 포드에 대한 안정적인 접근점을 제공하며, 로드 밸런싱과 서비스 발견 기능을 제공합니다.

1. #### 디플로이먼트 (Deployment):
애플리케이션의 선언적 업데이트를 관리합니다. 디플로이먼트는 포드의 생성, 업데이트, 롤백 등을 자동화합니다.

1. #### 스테이트풀셋 (StatefulSet):
상태가 있는 애플리케이션을 위한 리소스입니다. 포드에 안정적인 네트워크 식별자와 안정적인 저장소를 제공합니다.

1. #### 컨피그맵 (ConfigMap) 및 시크릿 (Secret):
애플리케이션의 설정 정보를 외부에서 관리할 수 있도록 도와줍니다. 컨피그맵은 일반 설정 데이터를 저장하고, 시크릿은 민감한 데이터를 저장합니다.

1. #### 네임스페이스 (Namespace):
클러스터 내에서 리소스를 논리적으로 분리하는 데 사용됩니다. 서로 다른 환경(예: 개발, 테스트, 프로덕션)에서 리소스를 구분할 수 있습니다.

1. #### 클러스터 관리 (Cluster Management):
클러스터의 상태를 모니터링하고, 리소스를 조정하며, 장애 복구 및 스케일링을 지원합니다.

### 쿠버네티스의 핵심 기능
1. #### 자동화된 배포 및 롤백 (Automated Deployment and Rollbacks):
애플리케이션을 손쉽게 배포하고, 필요에 따라 롤백할 수 있습니다. 새 버전의 애플리케이션을 배포하고 문제가 발생하면 자동으로 이전 버전으로 복구할 수 있습니다.

1. #### 자동 스케일링 (Automatic Scaling):
애플리케이션의 부하에 따라 자동으로 포드의 수를 조정할 수 있습니다. 수평적 스케일링(포드 수 증가/감소)과 수직적 스케일링(노드의 자원 증가/감소)을 지원합니다.

1. #### 로드 밸런싱 (Load Balancing):
서비스에 대한 트래픽을 여러 포드로 분산시켜 로드 밸런싱을 수행합니다. 서비스가 제공하는 단일 IP 주소와 포트를 통해 외부에서 접근할 수 있습니다.

1. #### 셀프 힐링 (Self-Healing):
실패한 포드를 자동으로 감지하고 재시작합니다. 포드가 실패하면 새로운 포드를 배치하여 시스템의 안정성을 유지합니다.

1. #### 자동화된 롤링 업데이트 (Rolling Updates):
애플리케이션의 새 버전을 점진적으로 배포하여 중단 없이 업데이트를 수행합니다. 롤링 업데이트 도중 문제가 발생하면 롤백하여 이전 상태로 복구합니다.

1. #### 서비스 디스커버리 (Service Discovery):
클러스터 내에서 동적으로 서비스와 포드를 발견하고 접근할 수 있는 기능을 제공합니다. 서비스 이름을 통해 포드에 접근할 수 있습니다.

### 쿠버네티스 아키텍처
1. #### API 서버 (API Server):
클러스터의 API 엔드포인트로, 클러스터 상태를 확인하고 리소스를 관리하는 중앙 집중식 서버입니다.

1. #### 스케줄러 (Scheduler):
새로운 포드가 생성될 때, 이를 클러스터의 적절한 노드에 배치합니다.

1. #### 컨트롤러 매니저 (Controller Manager):
클러스터의 상태를 모니터링하고, 설정된 상태와 일치하도록 유지합니다. 디플로이먼트, 스테이트풀셋 등의 작업을 수행합니다.

1. #### etcd:
클러스터 상태를 저장하는 분산 키-값 저장소입니다. 쿠버네티스의 모든 구성 데이터를 유지합니다.

1. #### Kubelet:
각 워커 노드에서 실행되며, 노드의 상태를 관리하고 포드를 실행합니다. API 서버와 통신하여 상태를 보고합니다.

1. #### Kube-Proxy:
클러스터의 네트워크 프록시를 관리하고, 서비스와 포드 간의 네트워크 트래픽을 라우팅합니다.

### 쿠버네티스 배포 및 관리
쿠버네티스 클러스터는 클라우드 제공업체(예: Google Kubernetes Engine, Amazon EKS, Azure Kubernetes Service) 또는 온프레미스 환경에 배포할 수 있습니다. 쿠버네티스는 다양한 도구와 솔루션과 통합하여 클러스터를 관리할 수 있도록 지원합니다. 대표적으로 Helm(패키지 관리 도구), Prometheus(모니터링), Grafana(시각화) 등이 있습니다.

### 결론
쿠버네티스는 컨테이너화된 애플리케이션의 배포, 스케일링, 관리 등을 자동화하고 효율적으로 관리하는 강력한 플랫폼입니다. 대규모 분산 애플리케이션을 운영하는 데 필요한 다양한 기능을 제공하며, 개발자와 운영팀이 복잡한 인프라를 쉽게 관리할 수 있게 도와줍니다.