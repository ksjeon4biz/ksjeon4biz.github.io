---
layout: post
title:  "MSA 비기능 요구사항"
date:   2024-08-12 20:50:00 +0900
categories: architecture
---

소프트웨어 공학에서 비기능적 요구사항(Non-Functional Requirements, NFRs)은 시스템이 어떻게 동작해야 하는지를 정의하는 요구사항입니다. 기능적 요구사항(Functional Requirements)이 시스템이 무엇을 해야 하는지를 설명하는 것과는 달리, 비기능적 요구사항은 시스템의 품질 속성이나 제약 사항에 관련된 요소를 다룹니다. 이러한 요구사항은 시스템의 전반적인 사용자 경험, 성능, 보안, 유지보수성 등에 큰 영향을 미칩니다.

## 주요 비기능적 요구사항
### 1. 성능 (Performance)
* 응답 시간(Response Time): 사용자 요청에 대한 시스템의 응답 속도.

* 처리량(Throughput): 단위 시간당 처리할 수 있는 작업의 양.

* 대기 시간(Latency): 시스템이 요청을 처리하기 시작하는 시간과 완료하는 시간 사이의 지연.

* 자원 사용량(Resource Utilization): CPU, 메모리, 디스크 등의 시스템 자원 사용률.

### 2. 확장성 (Scalability)
* 수평 확장성(Horizontal Scalability): 더 많은 시스템 인스턴스를 추가하여 성능을 확장하는 능력.

* 수직 확장성(Vertical Scalability): 기존 시스템 인스턴스의 자원(CPU, 메모리 등)을 증가시켜 성능을 확장하는 능력.

### 3. 신뢰성 (Reliability)
* 가용성(Availability): 시스템이 주어진 시간 동안 정상적으로 동작할 수 있는 능력. 일반적으로 백분율로 표현됩니다.

* 내결함성(Fault Tolerance): 시스템이 부분적인 실패 상황에서도 정상적인 서비스를 제공할 수 있는 능력.

* 복구 시간(Recovery Time): 장애 발생 후 정상 상태로 복구되는 시간.

### 4. 보안 (Security)
* 인증(Authentication): 시스템 사용자의 신원을 확인하는 과정.

* 권한 부여(Authorization): 사용자에게 적절한 접근 권한을 부여하는 과정.

* 데이터 암호화(Data Encryption): 데이터의 기밀성을 유지하기 위한 암호화.

* 감사 추적(Audit Trail): 사용자의 활동 기록을 보관하고 추적하는 기능.

### 5. 유지보수성 (Maintainability)
* 코드 품질(Code Quality): 코드의 가독성, 일관성, 복잡도 등을 포함한 코드의 품질.

* 테스트 용이성(Testability): 시스템이 쉽게 테스트될 수 있는 정도.

* 모듈성(Modularity): 시스템이 독립적인 모듈로 구성되어 있는지 여부.

### 6. 사용성 (Usability)
* 직관성(Intuitiveness): 사용자 인터페이스가 사용하기 쉽고 직관적인 정도.

* 반응성(Responsiveness): 사용자 입력에 대한 시스템의 반응 속도.

* 접근성(Accessibility): 다양한 사용자(장애인 포함)가 시스템을 사용할 수 있는 정도.

### 7. 이식성 (Portability)
* 플랫폼 독립성(Platform Independence): 시스템이 다양한 하드웨어 및 소프트웨어 환경에서 실행될 수 있는 능력.

* 설치 용이성(Installability): 시스템이 다양한 환경에 쉽게 설치될 수 있는 정도.

### 8. 상호운용성 (Interoperability)
* 호환성(Compatibility): 시스템이 다른 시스템과 상호 작용할 수 있는 능력.

* 데이터 교환(Data Exchange): 다른 시스템과 데이터를 교환할 수 있는 능력.

## MSA 관점에서의 비기능적 요구사항
마이크로서비스 아키텍처(MSA)에서 비기능적 요구사항은 특히 중요한 역할을 합니다. 각 마이크로서비스가 독립적으로 배포되고 관리되기 때문에 다음과 같은 추가적인 고려 사항이 필요합니다:

* 서비스 간 통신 성능: 서비스 간 호출의 성능 최적화가 중요합니다.

* 분산 트레이싱: 서비스 간 호출을 추적하여 성능 문제나 장애를 분석할 수 있어야 합니다.

* 데이터 일관성: 분산 데이터베이스 환경에서 데이터 일관성을 유지하는 방법.

* 자동화된 배포 및 모니터링: CI/CD 파이프라인과 모니터링 시스템을 통해 빠르고 안정적인 배포와 운영을 지원해야 합니다.

이러한 비기능적 요구사항들은 시스템의 성공적인 구현과 사용자 만족을 위해 반드시 고려되어야 합니다. 각 요구사항은 시스템 설계 초기 단계부터 지속적으로 평가되고 테스트되어야 하며, 변화하는 요구와 환경에 맞춰 조정되어야 합니다.