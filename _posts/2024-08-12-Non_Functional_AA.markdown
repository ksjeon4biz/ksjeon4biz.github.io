---
layout: post
title:  "비기능을 고려한 AA"
date:   2024-08-12 23:30:00 +0900
categories: architecture
---

보안을 고려해야 하는 다양한 요구 사항들과 그에 따른 Application Architecture의 예시를 설명해 드리겠습니다.

### 1. 인증과 권한 관리 (Authentication and Authorization)
* 요구 사항: 사용자가 시스템에 안전하게 접근하고, 적절한 권한으로만 데이터와 기능에 접근할 수 있어야 합니다.

* 아키텍처 예시:
    * 마이크로서비스 아키텍처: 각 마이크로서비스는 인증 및 권한 부여를 독립적으로 처리할 수 있습니다. 인증 서비스와 권한 관리 서비스를 별도로 구현하여 각 마이크로서비스가 이를 호출하여 사용자 인증 및 권한 검사를 수행할 수 있습니다.

### 2. 데이터 보안 (Data Security)
* 요구 사항: 데이터는 안전하게 저장되고 전송되어야 하며, 불법적인 접근으로부터 보호되어야 합니다.

* 아키텍처 예시:
    * 클라우드 네이티브 아키텍처: 클라우드 서비스 제공업체의 데이터 보호 기능을 활용할 수 있습니다. 데이터 암호화는 클라우드 데이터베이스에서 제공하는 서비스를 이용하거나, 애플리케이션 내에서 데이터 암호화 모듈을 사용하여 구현할 수 있습니다.

### 3. 네트워크 보안 (Network Security)
* 요구 사항: 애플리케이션과 사용자 간의 통신은 안전하게 이루어져야 하며, 중간에서의 데이터 변조와 감청을 방지해야 합니다.

* 아키텍처 예시:
    * 마이크로서비스 아키텍처: 각 마이크로서비스 간의 통신은 TLS(Transport Layer Security) 프로토콜을 사용하여 암호화될 수 있습니다. API 게이트웨이를 사용하여 모든 외부 통신을 집중 관리하고 보안 검사를 수행할 수도 있습니다.

### 4. 보안 감사와 모니터링 (Security Auditing and Monitoring)
* 요구 사항: 시스템의 보안 상태를 지속적으로 모니터링하고, 보안 이벤트를 식별하고 대응할 수 있어야 합니다.

* 아키텍처 예시:
    * 서버리스 아키텍처: 서버리스 환경에서는 각 함수 실행의 로깅과 모니터링을 중심으로 보안 상태를 관리할 수 있습니다. 이벤트 기반 아키텍처에서는 서버리스 함수가 이벤트에 반응하여 보안 이벤트를 신속하게 처리할 수 있습니다.

### 5. 애플리케이션 취약점 관리 (Application Vulnerability Management)
* 요구 사항: 개발 초기부터 보안 취약점을 식별하고, 이를 수정하며 테스트해야 합니다.

* 아키텍처 예시:
    * 컨테이너화된 아키텍처: 컨테이너 기반의 아키텍처에서는 이미지 스캐닝 도구를 통해 컨테이너 이미지의 보안 취약점을 분석하고 관리할 수 있습니다. CI/CD 파이프라인에서 자동화된 보안 테스트와 배포 전 검증을 수행하여 취약점을 최소화할 수 있습니다.

이러한 보안 요구 사항들은 소프트웨어 아키텍처 설계 단계에서 고려되어야 하며, 각 요구 사항에 적합한 기술적 결정과 구현 방법을 선택하여 보안을 강화할 수 있습니다.


---
---


가용성을 고려해야 하는 요구 사항과 이를 반영한 Application Architecture의 예시를 설명해 드리겠습니다.

### 요구 사항: 가용성을 고려해야 하는 이유
가용성은 시스템이 사용 가능한 상태를 유지하고, 사용자가 필요할 때 항상 서비스에 접근할 수 있도록 보장하는 것입니다. 특히 현대의 디지털 서비스에서는 사용자들이 항상 접근할 수 있어야 하며, 장애 시의 서비스 중단은 비용과 평판에 치명적일 수 있습니다. 따라서 가용성은 비즈니스 성공에 중요한 요소가 됩니다.

### Application Architecture의 예시
1. #### 분산 시스템 아키텍처 (Distributed Systems Architecture)
    * 특징: 서비스가 여러 개의 독립적인 구성 요소로 분할되어 각 요소는 별도의 서버에서 실행됩니다. 이를 통해 단일 서버 장애가 전체 시스템에 영향을 미치지 않도록 합니다.

    * 예시: 대규모 웹 어플리케이션에서는 프런트엔드, 백엔드, 데이터베이스 등 각각을 서로 다른 서버에 배치하여 분산 시스템을 형성할 수 있습니다. 예를 들어, Netflix는 수천 개의 서버에 걸쳐 서비스를 제공하고 있으며, 각 서버는 특정 영역의 서비스를 담당합니다.

1. #### 마이크로서비스 아키텍처 (Microservices Architecture)
    * 특징: 전체 어플리케이션을 작은 독립적인 마이크로서비스로 나누어 개발하고 배포합니다. 각 마이크로서비스는 자체적으로 독립적으로 배포, 확장, 관리될 수 있습니다.

    * 예시: Amazon의 이커머스 플랫폼은 주문 관리, 재고 관리, 결제 처리 등 각기 다른 기능을 수행하는 수십 개의 마이크로서비스로 구성됩니다. 이를 통해 특정 서비스의 장애가 전체 시스템에 영향을 미치지 않고 기능을 제공할 수 있습니다.

1. #### 서버리스 아키텍처 (Serverless Architecture)
    * 특징: 인프라 관리를 최소화하고 필요할 때마다 코드가 실행되는 함수 단위로 서비스를 제공합니다. 서버리스 환경에서는 자동으로 확장되어 트래픽 증가에도 대응할 수 있습니다.

    * 예시: AWS Lambda나 Azure Functions와 같은 서버리스 플랫폼을 사용하여, 특정 이벤트(예: HTTP 요청, 데이터베이스 업데이트 등) 발생 시 함수가 실행되어 필요한 서비스를 제공합니다. 이는 트래픽 변동에 빠르게 대응할 수 있는 데 도움을 줍니다.

1. #### 고가용성을 위한 복제와 로드 밸런싱
    * 특징: 데이터베이스나 애플리케이션 서버를 여러 인스턴스로 복제하여 가용성을 높이고, 로드 밸런서를 사용하여 트래픽을 균형있게 분산시킵니다.

    * 예시: 웹 어플리케이션에서 데이터베이스는 주로 마스터-슬레이브 복제를 통해 읽기 및 쓰기 작업을 분산합니다. 로드 밸런서는 들어오는 HTTP 요청을 여러 웹 서버 인스턴스로 분산하여 각 서버의 부하를 분산시키고 가용성을 높입니다.

이러한 아키텍처 패턴들은 각각의 상황에 따라 다양하게 조합될 수 있으며, 가용성 요구 사항에 맞게 설계되어야 합니다. 각 예시는 다양한 기술 스택과 플랫폼에서 구현될 수 있으며, 실제로는 이러한 패턴들을 조정하거나 조합하여 최적의 솔루션을 제공하는 것이 중요합니다.


---
---


유지보수성을 고려해야 하는 요구 사항과 그에 적합한 Application Architecture의 예시를 설명해 드리겠습니다.

### 유지보수성을 고려해야 하는 요구 사항
1. #### 모듈화와 코드 가독성
요구 사항: 소프트웨어는 모듈화되어 각 기능이 분리되어야 하며, 코드는 명확하고 가독성 있어야 합니다. 이는 새로운 기능 추가나 기존 코드 수정 시에 이해와 수정이 쉬워야 한다는 것을 의미합니다.

1. #### 의존성 관리
요구 사항: 소프트웨어 구성 요소들 간의 의존성을 최소화하고, 의존 관계가 필요할 때는 잘 정의되고 투명하게 관리되어야 합니다. 이는 시스템의 복잡성을 줄이고 변경 시 영향을 최소화하는 데 중요합니다.

1. #### 테스트 가능성
요구 사항: 코드는 테스트 가능해야 하며, 자동화된 테스트 스위트가 구축되어야 합니다. 이는 코드 변경에 따른 예상치 못한 부작용을 방지하고, 소프트웨어의 안정성을 유지하는 데 중요합니다.

1. #### 문서화와 주석
요구 사항: 코드와 시스템 설계에 대한 명확하고 상세한 문서화가 필요하며, 코드에는 명시적이고 유용한 주석이 포함되어야 합니다. 이는 새로운 개발자나 유지보수 담당자가 코드를 이해하고 수정할 때 도움이 됩니다.

### Application Architecture의 예시
1. #### 계층형 아키텍처 (Layered Architecture)
* 특징: 소프트웨어를 여러 개의 레이어로 나누어 구성하는 아키텍처입니다. 각 레이어는 특정 역할을 수행하며, 상위 레이어는 하위 레이어의 서비스를 사용합니다. 이는 각 레이어가 독립적으로 개발, 테스트, 배포될 수 있게 합니다.

* 예시: 전통적인 웹 애플리케이션에서는 Presentation Layer(프론트엔드), Business Logic Layer(백엔드 서비스), Data Access Layer(데이터베이스 접근)로 구성될 수 있습니다. 각 레이어는 자신의 역할에 집중하며, 변경이 필요할 때 해당 레이어만 수정하면 되므로 유지보수가 용이합니다.

1. #### 마이크로서비스 아키텍처 (Microservices Architecture)
* 특징: 애플리케이션을 작은 독립적인 서비스로 나누어 개발하고, 각 서비스는 특정 기능을 수행합니다. 이들 서비스는 각기 다른 데이터베이스나 기술 스택을 사용할 수 있으며, 서로 통신은 API를 통해 이루어집니다.

* 예시: Amazon의 경우 주문 관리, 결제 처리, 배송 추적 등의 기능을 각기 다른 마이크로서비스로 구성합니다. 이러한 구조는 각 서비스가 독립적으로 관리되고, 개별적으로 배포되며, 변경이 필요할 때 다른 서비스에 영향을 미치지 않습니다.

1. #### 이벤트 기반 아키텍처 (Event-Driven Architecture)
* 특징: 시스템 내의 다양한 구성 요소들이 이벤트와 메시지를 통해 비동기적으로 상호작용합니다. 각 구성 요소는 필요한 이벤트를 구독하고, 발생하는 이벤트에 반응합니다.

* 예시: 주문 처리 시스템에서는 주문 생성, 결제 완료 등의 이벤트가 발생할 때마다 각 서비스가 이를 구독하여 필요한 작업을 수행합니다. 이러한 구조는 서비스 간의 결합도를 낮추고, 유연성을 높여 유지보수성을 강화할 수 있습니다.

이러한 아키텍처 패턴들은 각기 다른 유지보수성 요구 사항에 맞춰 선택될 수 있으며, 소프트웨어 시스템의 변경과 확장을 용이하게 만들어 줍니다. 각 예시는 실제 적용 시에 구체적인 요구 사항과 비즈니스 환경을 고려하여 조정되어야 합니다.