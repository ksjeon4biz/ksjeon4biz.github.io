---
layout: post
title:  "Domain Driven Design"
date:   2024-08-11 19:09:00 +0900
categories: architecture
---

도메인 주도 설계(DDD, Domain-Driven Design)는 소프트웨어 개발 방법론으로, 복잡한 시스템을 설계하고 개발할 때 도메인 모델을 중심으로 접근하는 방법입니다. DDD는 소프트웨어 프로젝트가 도메인의 비즈니스 요구사항을 충족하도록 하는 데 중점을 둡니다. Eric Evans가 2003년에 출간한 책 "Domain-Driven Design: Tackling Complexity in the Heart of Software"에서 처음 제안되었습니다. 다음은 DDD의 주요 개념과 구성 요소에 대한 설명입니다.

## 주요 개념
1. ### 도메인(Domain):
    특정 비즈니스 문제 영역입니다. 소프트웨어가 해결하고자 하는 문제와 관련된 모든 지식과 활동을 포함합니다.

1. ### 도메인 모델(Domain Model):
    도메인의 개념과 논리를 표현한 모델입니다. 이는 코드로 구현된 클래스, 메서드, 관계 등을 통해 도메인을 나타냅니다.

1. ### 유비쿼터스 언어(Ubiquitous Language):
    개발 팀과 도메인 전문가가 공유하는 언어입니다. 이 언어를 통해 도메인을 논의하고 모델링하며, 모든 팀원이 동일한 용어를 사용하여 소통할 수 있도록 합니다.

1. ### 바운디드 컨텍스트(Bounded Context):
    도메인 모델을 경계로 나누어 관리하기 위한 경계입니다. 각 바운디드 컨텍스트는 독립적인 도메인 모델을 가지며, 다른 컨텍스트와의 상호작용은 명확하게 정의된 인터페이스를 통해 이루어집니다.

## 구성 요소
1. ### 엔티티(Entity):
    고유 식별자를 가진 도메인 객체입니다. 엔티티는 자신의 라이프사이클 동안 변경될 수 있으며, 식별자를 통해 다른 엔티티와 구분됩니다.

1. ### 밸류 객체(Value Object):
    고유 식별자가 없고, 불변하는 도메인 객체입니다. 밸류 객체는 그 자체의 속성으로만 정의되며, 값이 같으면 동일한 객체로 간주됩니다.

1. ### 어그리게이트(Aggregate):
    관련된 엔티티와 밸류 객체의 그룹입니다. 어그리게이트는 하나의 루트 엔티티(어그리게이트 루트)를 가지며, 외부에서는 이 루트를 통해서만 접근할 수 있습니다.

1. ### 리포지토리(Repository):
    엔티티와 어그리게이트를 저장하고 검색하는 인터페이스입니다. 데이터베이스와의 상호작용을 추상화하여 도메인 모델이 데이터 접근 세부사항으로부터 독립될 수 있도록 합니다.

1. ### 서비스(Service):
    엔티티나 밸류 객체에 속하지 않는 도메인 로직을 캡슐화합니다. 도메인 서비스는 도메인 모델의 핵심 비즈니스 로직을 구현합니다.

1. ### 팩토리(Factory):
    복잡한 객체 생성 로직을 캡슐화하여 도메인 모델에서 객체 생성 책임을 분리합니다.

## DDD 구현 단계
1. ### 도메인 분석:
    도메인 전문가와 협력하여 도메인을 이해하고, 유비쿼터스 언어를 정의합니다.

1. ### 바운디드 컨텍스트 정의:
    도메인을 바운디드 컨텍스트로 나누고, 각 컨텍스트의 경계를 명확히 정의합니다.

1. ### 도메인 모델 설계:
    엔티티, 밸류 객체, 어그리게이트, 리포지토리, 서비스 등의 도메인 모델을 설계하고 구현합니다.

1. ### 응용 계층 설계:
    응용 서비스(Application Service)를 정의하여, 도메인 모델을 이용한 비즈니스 로직을 구현합니다.

1. ### 인프라스트럭처 계층 설계:
    데이터베이스, 메시징 시스템, 외부 API 등 인프라스트럭처와의 상호작용을 처리합니다.

## DDD의 장점

* __비즈니스 로직의 명확한 표현__: 도메인 모델을 통해 비즈니스 로직을 명확하게 표현할 수 있습니다.

* __유연한 설계__: 도메인 모델을 바운디드 컨텍스트로 나누어 관리함으로써, 시스템을 더 유연하고 확장 가능하게 설계할 수 있습니다.

* __팀 간의 원활한 소통__: 유비쿼터스 언어를 통해 개발 팀과 도메인 전문가 간의 소통을 원활하게 합니다.

## DDD의 단점

* __복잡성__: 초기 도메인 분석과 모델링 작업이 복잡하고 시간이 많이 소요될 수 있습니다.

* __높은 학습 곡선__: 팀원들이 DDD 개념을 이해하고 적용하는 데 시간이 필요할 수 있습니다.

DDD는 복잡한 비즈니스 도메인을 다루는 소프트웨어 프로젝트에서 강력한 접근 방식이지만, 모든 프로젝트에 적합하지는 않습니다. 프로젝트의 복잡성과 팀의 역량을 고려하여 DDD를 적용하는 것이 중요합니다.