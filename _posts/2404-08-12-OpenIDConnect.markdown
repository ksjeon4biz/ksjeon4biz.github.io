---
layout: post
title:  "OpenID Connect"
date:   2024-08-12 20:16:00 +0900
categories: architecture
---

OpenID Connect(OpenID Connect 1.0)는 OAuth 2.0을 기반으로 한 인증 프로토콜입니다. OpenID Connect는 사용자가 한 번의 로그인으로 여러 애플리케이션과 사이트에 접근할 수 있도록 해줍니다. OAuth 2.0의 권한 부여 기능을 확장하여 인증(Authentication)을 추가한 것입니다. 다음은 OpenID Connect에 대한 자세한 설명입니다.

## 주요 개념 및 구성 요소
1. #### End-User(최종 사용자):
    * 인증을 통해 자신의 신원을 증명하려는 사용자.

1. #### Relying Party(RP, 클라이언트):
    * 인증 정보를 받아 사용자 신원을 확인하는 애플리케이션 또는 서비스.

1. #### OpenID Provider(OP):
    * 사용자 인증을 수행하고 ID 토큰을 발급하는 서비스 제공자. 예를 들어, 구글, 페이스북 등이 OP 역할을 할 수 있습니다.

1. #### ID Token:
    * 사용자의 신원을 나타내는 JSON 웹 토큰(JWT). 사용자의 인증 상태 및 세부 정보를 포함합니다.

1. #### UserInfo Endpoint:
    * 인증된 사용자에 대한 추가 정보를 제공하는 엔드포인트.

## 작동 방식
1. #### 인증 요청:
    * 사용자가 클라이언트(RP) 애플리케이션에 접근하려고 하면, 클라이언트는 사용자를 OpenID Provider(OP)로 리디렉션합니다.

    * 클라이언트는 OP에게 인증 요청을 보내며, 이 요청에는 클라이언트 ID, 리디렉션 URI, 요청된 스코프(scope) 등이 포함됩니다.

1. #### 사용자 인증:
    * 사용자는 OP에서 로그인하여 자신의 신원을 인증합니다.

1. #### ID Token 발급:
    * 인증이 완료되면, OP는 클라이언트에게 ID 토큰 및 액세스 토큰을 발급합니다. ID 토큰은 사용자의 신원을 포함하고 있으며, 액세스 토큰은 UserInfo 엔드포인트에 접근하는 데 사용됩니다.

1. #### ID Token 검증:
    * 클라이언트는 ID 토큰의 서명을 검증하여 토큰의 유효성을 확인하고, 사용자 정보를 사용하여 인증을 완료합니다.

1. #### UserInfo 엔드포인트 접근:
    * 클라이언트는 액세스 토큰을 사용하여 UserInfo 엔드포인트에 요청을 보내 추가 사용자 정보를 받아올 수 있습니다.

## 주요 기능 및 특징
1. #### 표준화된 사용자 정보:
    * ID 토큰에는 표준화된 클레임(Claims)이 포함되어 있어, 클라이언트는 일관된 방식으로 사용자 정보를 처리할 수 있습니다.

1. #### 확장성:
    * 필요에 따라 추가 스코프와 클레임을 통해 확장할 수 있습니다.

1. #### 보안:
    * OAuth 2.0의 보안 기능을 계승하면서도, ID 토큰의 서명 및 암호화를 통해 추가적인 보안 계층을 제공합니다.

1. #### 간편한 통합:
    * 다양한 프로그래밍 언어와 플랫폼에서 쉽게 통합할 수 있도록 다양한 라이브러리와 SDK가 제공됩니다.

## 사용 사례
* 싱글 사인 온(SSO): 사용자가 한 번 로그인하면 여러 애플리케이션에 자동으로 로그인할 수 있게 해줍니다.

* 연합 로그인: 다양한 서비스 제공자가 동일한 사용자 계정을 통해 로그인할 수 있도록 합니다.

* 모바일 애플리케이션: 모바일 애플리케이션에서 중앙 집중식 인증을 제공합니다.

OpenID Connect는 OAuth 2.0의 확장으로, OAuth 2.0의 권한 부여 기능과 함께 사용자의 인증을 안전하고 표준화된 방식으로 처리할 수 있습니다. 이를 통해 다양한 애플리케이션과 서비스가 사용자 인증을 쉽게 구현할 수 있습니다.


---
---


Open ID는 사용자들이 여러 웹사이트에서 동일한 로그인 정보를 사용하여 접근할 수 있게 해주는 분산된 인증 프로토콜입니다. Open ID를 이용하면, 각각의 웹사이트마다 별도의 계정을 만들 필요 없이, 하나의 Open ID 계정으로 다양한 서비스에 로그인할 수 있습니다. 이를 통해 사용자는 로그인 과정이 간소화되고, 여러 사이트의 로그인 정보를 관리하는 번거로움을 줄일 수 있습니다.

## Open ID의 작동 방식
1. ### 사용자 등록 및 로그인:
    * 사용자는 Open ID 제공자(예: 구글, 페이스북 등)에 계정을 생성합니다.

    * 이후 해당 계정 정보를 통해 다른 웹사이트(서비스 제공자)에서 로그인할 수 있습니다.

1. ### 인증 과정:
    * 사용자가 로그인하려는 웹사이트에서 Open ID를 사용한 로그인을 선택합니다.

    * 사용자는 자신의 Open ID 제공자 페이지로 리디렉션되어 로그인 정보를 입력합니다.

    * 인증이 완료되면, Open ID 제공자는 인증 토큰을 서비스 제공자에게 전달합니다.

    * 서비스 제공자는 이 토큰을 검증한 후 사용자를 로그인시킵니다.

## 장점
* 편의성: 여러 사이트에서 하나의 계정으로 로그인할 수 있어 편리합니다.

* 보안: 비밀번호를 여러 웹사이트에 제공할 필요가 없어 보안 위험이 줄어듭니다.

* 관리 용이: 비밀번호나 계정 정보를 잊어버릴 걱정이 줄어듭니다.

## 단점
* 의존성: 특정 Open ID 제공자가 해킹당하거나 장애가 발생하면, 이를 사용하는 모든 서비스에 접근하기 어려울 수 있습니다.

* 프라이버시: 사용자가 어떤 웹사이트에 접속했는지 Open ID 제공자가 알 수 있는 가능성이 있습니다.

Open ID는 이러한 장점과 단점이 있지만, 사용자와 서비스 제공자에게 다양한 혜택을 제공하기 때문에 많은 웹사이트에서 사용되고 있습니다.


---
---


OAuth 2.0과 OpenID는 모두 인증 및 권한 부여 프로토콜이지만, 그 목적과 사용 방식에서 차이가 있습니다. 다음은 주요 차이점입니다.

## OAuth 2.0
1. ### 목적:
    * 주로 권한 부여(Authorization)에 사용됩니다.

    * 제3자 애플리케이션이 사용자의 자원에 접근할 수 있도록 권한을 부여하는 데 초점을 맞춥니다.

1. ### 주요 사용 사례:
    * 애플리케이션이 사용자를 대신하여 다른 서비스의 API에 접근할 때 사용됩니다. 예를 들어, 트위터 앱이 사용자의 트위터 계정에 접근하여 트윗을 작성할 수 있게 하는 경우.

1. ### 프로세스:
    * 클라이언트 애플리케이션이 자원 소유자(사용자)에게 권한을 요청합니다.

    * 사용자가 동의하면, 권한 부여 서버가 액세스 토큰을 발급합니다.

    * 클라이언트 애플리케이션은 이 액세스 토큰을 사용하여 자원 서버에 접근합니다.

1. ### 구성 요소:
    * 클라이언트(Client)

    * 자원 소유자(Resource Owner)

    * 권한 부여 서버(Authorization Server)

    * 자원 서버(Resource Server)

## OpenID
1. ### 목적:
    * 주로 인증(Authentication)에 사용됩니다.

    * 사용자가 자신이 누구인지 증명하는 데 초점을 맞춥니다.

1. ### 주요 사용 사례:
    * 사용자가 하나의 ID로 여러 웹사이트에 로그인할 수 있게 하는 경우. 예를 들어, 구글 계정을 사용하여 다양한 웹사이트에 로그인하는 경우.

1. ### 프로세스:
    * 사용자가 OpenID 제공자에 로그인합니다.

    * 제공자가 인증 토큰을 발급합니다.

    * 사용자 또는 애플리케이션이 이 토큰을 서비스 제공자에게 전달하여 사용자를 인증합니다.

1. ### 구성 요소:
    * 사용자인증자(User)

    * OpenID 제공자(OpenID Provider)

    * 서비스 제공자(Relying Party)

## 결론
* OAuth 2.0은 사용자의 자원에 접근할 수 있는 권한을 부여하는 데 중점을 두며, OpenID는 사용자의 신원을 인증하는 데 중점을 둡니다.

* OpenID는 기본적으로 인증을 위한 프로토콜이지만, OpenID Connect는 OAuth 2.0을 기반으로 확장되어 인증과 권한 부여를 모두 처리할 수 있습니다. OpenID Connect를 사용하면 OAuth 2.0의 권한 부여 기능과 함께 사용자 인증을 수행할 수 있습니다.