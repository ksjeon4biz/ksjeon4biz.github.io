---
layout: post
title:  "클라우드 MSA 로그인"
date:   2024-08-11 18:58:00 +0900
categories: architecture
---

클라우드 기반의 마이크로서비스 아키텍처(MSA)에서 로그인을 설계할 때는 분산 시스템의 특성과 보안 요구사항을 고려해야 합니다. OpenID Connect와 OAuth 2.0을 기반으로 하는 중앙 인증 서버를 사용하여 사용자 인증 및 권한 부여를 관리하는 방식이 일반적입니다. 아래는 이러한 시스템을 설계하는 방법에 대한 단계별 설명입니다.

## 1. 아키텍처 개요
* __인증 서버(Auth Server)__: OpenID Connect를 지원하는 인증 서버(예: Keycloak, Auth0, AWS Cognito)로 사용자 인증을 처리합니다.

* __API Gateway__: 모든 요청을 라우팅하고 인증 토큰을 검증하는 중앙 진입점입니다.

* __마이크로서비스__: 각각의 독립적인 기능을 제공하는 여러 서비스로 구성되며, 인증이 필요한 요청은 API Gateway를 통해 접근합니다.

* __클라이언트 애플리케이션__: 웹, 모바일, 또는 다른 형태의 클라이언트가 사용자와 상호작용합니다.

## 2. 인증 흐름
1. ### 사용자 로그인 요청:
    * 사용자가 클라이언트 애플리케이션에서 로그인을 시도합니다.

    * 클라이언트 애플리케이션은 인증 서버로 리디렉션하여 로그인 페이지를 표시합니다.

1. ### 사용자 인증:
    * 사용자는 인증 서버에서 자격 증명(예: 사용자 이름, 비밀번호)을 입력하여 인증합니다.

    * 인증 서버는 사용자를 인증하고, 인증이 성공하면 사용자에게 ID 토큰 및 액세스 토큰을 발급합니다.

1. ### 토큰 전달:
    * 클라이언트 애플리케이션은 인증 서버로부터 받은 ID 토큰 및 액세스 토큰을 저장합니다.

    * 이후 클라이언트 애플리케이션은 액세스 토큰을 사용하여 API Gateway 및 마이크로서비스에 요청을 보냅니다.

1. ### 토큰 검증:
    * API Gateway는 각 요청에서 액세스 토큰을 검증합니다.

    * 토큰이 유효하면 요청을 해당 마이크로서비스로 전달합니다.

    * 마이크로서비스는 필요에 따라 추가 권한 검사를 수행할 수 있습니다.

## 3. 권한 부여 및 역할 관리
* __권한 및 역할__: 사용자에 따라 다른 권한을 부여할 수 있도록 역할 기반 접근 제어(RBAC)를 사용합니다. 각 사용자에게 역할을 할당하고, 역할에 따라 접근 권한을 정의합니다.

* __스코프__: OAuth 2.0의 스코프(scope)를 사용하여 액세스 토큰의 권한 범위를 정의합니다. 예를 들어, read:orders, write:orders 등의 스코프를 통해 세부적인 권한 관리를 수행할 수 있습니다.

## 4. 세션 관리 및 토큰 갱신
* __세션 관리__: 클라이언트 애플리케이션은 토큰의 유효 기간 동안 세션을 유지합니다. 사용자가 로그아웃하면 토큰을 무효화하여 세션을 종료합니다.

* __토큰 갱신__: 액세스 토큰의 유효 기간이 짧기 때문에, 리프레시 토큰을 사용하여 새로운 액세스 토큰을 발급받을 수 있도록 합니다. 이를 통해 사용자 경험을 개선하고 보안을 강화합니다.

## 5. 보안 고려사항
* __HTTPS__: 모든 통신은 HTTPS를 사용하여 암호화합니다.

* __토큰 서명__: JWT 토큰은 서명하여 위조를 방지합니다. 토큰 서명에 사용되는 비밀 키는 안전하게 관리해야 합니다.

* __토큰 저장__: 클라이언트 애플리케이션은 토큰을 안전하게 저장해야 합니다. 웹 애플리케이션에서는 쿠키에 저장하고, 모바일 애플리케이션에서는 안전한 스토리지를 사용합니다.

* __모니터링 및 로깅__: 인증 및 권한 부여 관련 이벤트를 모니터링하고 로그를 기록하여 보안 인시던트를 탐지하고 대응할 수 있도록 합니다.

## 6. 샘플 구현
* __인증 서버 설정 (예: Keycloak)__

    * Keycloak을 설치하고 OpenID Connect 클라이언트를 설정합니다.

    * 사용자와 역할을 설정합니다.

* __클라이언트 애플리케이션__

    * 로그인 페이지에서 인증 서버로 리디렉션하여 사용자가 로그인할 수 있도록 합니다.

    * 로그인 성공 시, 받은 토큰을 저장하고 API 요청 시 포함합니다.

* __API Gateway__

    * 액세스 토큰을 검증하는 미들웨어를 설정합니다.

    * 요청을 해당 마이크로서비스로 라우팅합니다.

* __마이크로서비스__

    * 각 서비스는 필요에 따라 추가적인 권한 검사를 수행합니다.

    * 서비스 간 통신이 필요한 경우, 서비스 간에도 토큰을 사용하여 인증을 수행합니다.

이와 같이 설계하면, 클라우드 기반의 MSA 환경에서 안전하고 확장 가능한 로그인 및 인증 시스템을 구축할 수 있습니다.