---
layout: post
title:  "분산 트랜잭션"
date:   2024-08-11 17:21:00 +0900
categories: architecture
---

분산 트랜잭션은 여러 독립된 노드(또는 데이터베이스)에서 수행되는 트랜잭션을 조정하여, 트랜잭션의 원자성(Atomicity), 일관성(Consistency), 격리성(Isolation), 지속성(Durability), 즉 ACID 속성을 보장하는 것을 말합니다. 분산 트랜잭션은 일반적으로 서로 다른 데이터베이스나 서비스에서 데이터를 동시에 처리해야 할 때 사용됩니다.

## 왜 분산 트랜잭션이 필요한가?
분산 시스템에서는 데이터가 여러 위치에 저장되어 있거나, 여러 서비스가 협업하여 하나의 작업을 완료해야 할 때가 있습니다. 이 경우, 하나의 트랜잭션이 여러 데이터 소스에 걸쳐 있을 수 있는데, 이 트랜잭션이 성공하거나 실패하는 경우, 전체 트랜잭션의 일관성을 유지해야 합니다. 이를 위해 분산 트랜잭션이 필요합니다.

## 분산 트랜잭션의 특징
### 1. 분산 트랜잭션 관리:

* 단일 노드 트랜잭션과 달리, 분산 트랜잭션은 여러 데이터베이스나 서비스가 참여합니다. 트랜잭션 매니저(Transaction Manager)가 모든 참여 노드의 상태를 조정하고, 트랜잭션이 성공적으로 완료되거나 실패하는 경우 롤백을 관리합니다.

### 2. ACID 속성 보장:

* __원자성(Atomicity):__ 트랜잭션이 모든 노드에서 성공적으로 완료되거나, 그렇지 않으면 모든 변경이 롤백됩니다.
* __일관성(Consistency):__ 트랜잭션이 완료된 후 시스템이 일관된 상태를 유지합니다.
* __격리성(Isolation):__ 트랜잭션이 진행되는 동안 다른 트랜잭션이 그 상태를 볼 수 없도록 격리됩니다.
* __지속성(Durability):__ 트랜잭션이 성공적으로 완료된 경우, 결과는 시스템 오류나 충돌 후에도 지속됩니다.

### 3. 2-단계 커밋 프로토콜 (2PC, Two-Phase Commit):

* 분산 트랜잭션을 구현하기 위해 가장 많이 사용되는 프로토콜입니다. 2PC는 트랜잭션 매니저가 트랜잭션을 커밋하기 전에 모든 관련 노드가 트랜잭션을 성공적으로 준비(prepare)했는지 확인한 후, 실제 커밋을 수행하는 두 단계를 거칩니다.

## 2-단계 커밋 프로토콜 (2PC) 설명
### 1. Prepare 단계:

* 트랜잭션 매니저는 모든 참여 노드에게 "Prepare" 요청을 보냅니다. 각 노드는 해당 트랜잭션을 준비하고, 준비가 완료되면 "Yes" 또는 "No" 응답을 보냅니다.
* 모든 노드가 "Yes" 응답을 보낸 경우에만 트랜잭션이 커밋될 수 있습니다. 그렇지 않으면 트랜잭션은 롤백됩니다.

### 2. Commit 단계:

* 트랜잭션 매니저가 모든 노드로부터 "Yes"를 받으면 "Commit" 명령을 보내고, 트랜잭션을 최종적으로 커밋합니다.
* 만약 한 노드라도 "No"를 응답하면 트랜잭션 매니저는 모든 노드에게 "Rollback" 명령을 보내고, 트랜잭션을 취소합니다.

## 분산 트랜잭션의 예시
예를 들어, 은행 시스템에서 사용자 A가 B에게 돈을 송금하는 트랜잭션을 생각해 봅시다. 이 트랜잭션은 다음과 같은 두 가지 작업으로 이루어집니다.

1. A의 계좌에서 금액 차감

1. B의 계좌에 금액 추가

이 두 작업은 서로 다른 데이터베이스에서 수행될 수 있습니다. 분산 트랜잭션을 사용하면 이 두 작업이 성공적으로 완료되거나, 둘 다 취소(롤백)되어 A의 계좌에서 금액이 빠져나갔는데도 B의 계좌에 추가되지 않는 상황을 방지할 수 있습니다.

## 분산 트랜잭션의 단점
* __복잡성:__ 여러 노드를 관리해야 하므로 시스템이 복잡해지고, 구현이 어렵습니다.
* __성능 저하:__ 모든 노드가 트랜잭션 준비와 커밋 과정에 참여해야 하므로, 트랜잭션 수행 시간이 길어질 수 있습니다.
* __확장성 제한:__ 2PC 프로토콜은 확장성에 한계가 있으며, 매우 큰 규모의 시스템에서는 성능과 안정성 문제가 발생할 수 있습니다.

## 대안: 분산 시스템에서의 트랜잭션 관리
대규모 분산 시스템에서는 트랜잭션 대신 **사후 일관성(Eventual Consistency)**이나 **사가 패턴(Saga Pattern)**과 같은 다른 기법을 사용하는 경우가 많습니다. 이러한 방법은 분산 트랜잭션이 갖는 복잡성과 성능 저하 문제를 해결할 수 있습니다.

* __사가 패턴:__ 트랜잭션을 여러 개의 작은 단계로 나누고, 각 단계가 실패하면 보상 트랜잭션을 실행하여 시스템을 이전 상태로 복원합니다.

## 요약
분산 트랜잭션은 여러 독립된 노드에서 실행되는 트랜잭션을 조정하여 ACID 속성을 보장합니다. 이를 위해 2-단계 커밋(2PC)과 같은 프로토콜을 사용합니다. 하지만 복잡성과 성능 저하 문제로 인해 대규모 시스템에서는 사가 패턴과 같은 대안이 자주 사용됩니다.