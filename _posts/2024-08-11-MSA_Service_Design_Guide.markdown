---
layout: post
title:  "MSA 서비스 설계표준"
date:   2024-08-11 17:52:00 +0900
categories: architecture
---

마이크로서비스 아키텍처(MSA)에서 서비스 설계 표준은 서비스 간의 일관성, 재사용성, 확장성을 보장하기 위해 따르는 일련의 원칙과 가이드라인을 의미합니다. 이러한 표준은 시스템의 복잡성을 줄이고, 팀 간의 협업을 원활하게 하며, 서비스의 유지보수성을 높이는 데 중요한 역할을 합니다.

## MSA 서비스 설계 표준
### 1. 단일 책임 원칙(Single Responsibility Principle)

* 각 마이크로서비스는 하나의 비즈니스 기능이나 도메인에 집중해야 합니다. 이는 서비스가 작고, 단일 기능에 집중하도록 만들어야 하며, 다른 서비스에 대한 의존성을 최소화합니다.

### 2. 독립적인 배포 가능성(Independent Deployability)

* 서비스는 다른 서비스와 독립적으로 배포될 수 있어야 합니다. 이를 통해 특정 서비스의 변경이나 업데이트가 다른 서비스에 영향을 주지 않도록 하며, 빠르고 유연한 배포가 가능합니다.

### 3. API 계약(Contract)

* 서비스 간 통신은 명확하게 정의된 API 계약에 따라 이루어져야 합니다. API는 RESTful 방식이 일반적이며, gRPC나 GraphQL을 사용하는 경우도 있습니다. API의 버전 관리도 중요하며, 변경 사항은 신중하게 관리해야 합니다.
* API는 표준화된 오류 코드와 메시지를 사용하여 일관된 방식으로 클라이언트와 통신해야 합니다.

### 4. 데이터베이스 분리(Database per Service)

* 각 서비스는 독립된 데이터베이스를 가져야 합니다. 이는 서비스 간의 결합도를 줄이고, 데이터 모델이 서비스 내에서 독립적으로 진화할 수 있게 합니다.
* 서비스 간 데이터 공유는 데이터베이스를 직접 접근하는 대신, API 호출이나 이벤트 기반 통신을 통해 이루어져야 합니다.

### 5. 비동기 통신(Asynchronous Communication)

* 서비스 간의 통신은 가능하면 비동기적으로 이루어져야 합니다. 이는 시스템의 확장성과 복원력을 높여주며, 특히 이벤트 기반 아키텍처에서 유용합니다.
* 메시지 큐(예: Kafka, RabbitMQ)나 이벤트 스트리밍을 통해 서비스 간 메시지를 전달하고 처리합니다.

### 6. Idempotency(멱등성)

* 서비스의 API는 멱등성을 가져야 합니다. 즉, 동일한 요청을 여러 번 수행해도 결과가 달라지지 않도록 설계해야 합니다. 이는 네트워크 오류로 인해 재시도된 요청에서 중복 처리를 방지할 수 있습니다.

### 7. 표준화된 로그 및 모니터링(Logging & Monitoring)

* 모든 서비스는 표준화된 방식으로 로그를 기록하고, 모니터링할 수 있어야 합니다. 로그 형식, 수준(level), 에러 핸들링 방식 등이 표준화되어야 합니다.
* 분산 추적 시스템(예: Jaeger, Zipkin)을 통해 서비스 간의 요청 흐름을 추적하고 성능을 모니터링할 수 있어야 합니다.

### 8. 보안 표준(Security Standards)

* 각 서비스는 인증(Authentication)과 권한 부여(Authorization) 메커니즘을 표준화된 방식으로 구현해야 합니다. 일반적으로 OAuth 2.0, JWT(JSON Web Token) 등이 사용됩니다.
* 데이터 전송 시 TLS를 통해 암호화하고, 민감한 데이터는 암호화된 상태로 저장해야 합니다.

### 9. 버전 관리(Versioning)

* 서비스의 API와 계약은 버전 관리가 되어야 합니다. 새로운 기능을 추가하거나 변경할 때 기존 클라이언트와의 호환성을 유지하기 위해 API 버전을 명시적으로 관리해야 합니다.

### 10. 오토스케일링(Autoscaling) 및 회복력(Resilience)

* 서비스는 수요에 따라 자동으로 확장 및 축소될 수 있어야 하며, 장애가 발생하더라도 자동으로 복구될 수 있는 능력을 가져야 합니다.
* 서킷 브레이커 패턴, 백오프(backoff), 리트라이(retry) 등의 회복력 패턴이 적용되어야 합니다.

### 11. 도메인 주도 설계(Domain-Driven Design, DDD)

* MSA 설계 시 **도메인 주도 설계(DDD)**의 개념을 적용하여 서비스의 경계를 설정합니다. 이는 각 서비스가 특정 도메인의 개념과 규칙을 기반으로 설계되도록 하며, 서비스 간 명확한 경계를 설정합니다.
* 서비스는 Bounded Context를 따라 설계되며, 이는 서비스 간의 중복을 줄이고, 비즈니스 로직을 명확히 이해하는 데 도움을 줍니다.

### 12. 이벤트 소싱(Event Sourcing)

* 필요에 따라 이벤트 소싱을 도입하여 서비스의 상태 변화를 이벤트로 저장하고 관리할 수 있습니다. 이는 데이터의 일관성 유지와 복구에 유리한 패턴입니다.

## 서비스 설계 표준의 중요성
서비스 설계 표준을 준수하면 다음과 같은 장점이 있습니다:

* 일관성: 모든 서비스가 동일한 표준을 따르므로 시스템의 일관성이 유지되고, 개발자 간의 협업이 원활해집니다.
* 재사용성: 공통된 표준은 서비스 간 재사용을 촉진하며, 코드 중복을 줄일 수 있습니다.
* 유지보수성: 일관된 설계는 디버깅, 모니터링, 확장 시 복잡성을 줄이고, 시스템 유지보수성을 향상시킵니다.
* 보안성: 표준화된 보안 정책을 통해 서비스 전반에 걸쳐 안전한 운영이 가능해집니다.
* 이러한 표준을 잘 정의하고 적용하면 MSA의 복잡성을 효과적으로 관리하면서 시스템의 확장성과 유연성을 높일 수 있습니다.