---
layout: post
title:  "Front End 기술의 선택이 Back End에 미치는 영향"
date:   2024-08-12 23:05:00 +0900
categories: architecture
---

프론트엔드에서 선택된 기술이 백엔드 아키텍처에 영향을 미칠 수 있습니다. 이는 주로 통신 방식, 데이터 처리, 성능 요구 사항 및 개발 효율성과 관련이 있습니다. 아래는 프론트엔드 기술이 백엔드 아키텍처에 영향을 미칠 수 있는 몇 가지 방법과 그에 따른 고려 사항입니다.

### 1. 통신 방식
프론트엔드 기술에 따라 HTTP 요청 패턴이나 WebSocket 사용 여부가 달라질 수 있습니다.

* 싱글 페이지 애플리케이션(SPA): React, Angular, Vue.js와 같은 프레임워크를 사용하는 SPA는 주로 RESTful API 또는 GraphQL을 통해 백엔드와 통신합니다. 이는 백엔드가 REST API 또는 GraphQL 서버를 제공하도록 요구합니다.
    * REST API: 단순하고 널리 사용되며, 대부분의 백엔드 프레임워크가 지원.
    * GraphQL: 클라이언트가 필요한 데이터만 요청할 수 있도록 하여 데이터 전송 효율성을 높임.

* 실시간 애플리케이션: 채팅 애플리케이션이나 실시간 데이터 업데이트가 필요한 경우, WebSocket을 사용해야 할 수 있습니다. 이는 백엔드에서 WebSocket 서버를 구현해야 함을 의미합니다.
    * Socket.IO: Node.js와 함께 사용되며, 실시간 양방향 통신을 지원.
    * STOMP over WebSocket: 스프링 프레임워크와 같은 Java 백엔드에서 사용 가능.

### 2. 데이터 처리
프론트엔드에서 데이터를 어떻게 처리하는지에 따라 백엔드의 데이터 제공 방식이 달라질 수 있습니다.

* 대량의 데이터 요청: 데이터 테이블이나 무한 스크롤과 같은 기능을 위해 백엔드에서 페이징, 정렬, 필터링을 지원해야 합니다.
    * 페이징: API 설계 시 페이징 기능을 포함하여 클라이언트가 한 번에 너무 많은 데이터를 요청하지 않도록 함.
    * 정렬 및 필터링: API에서 다양한 쿼리 파라미터를 지원하여 클라이언트의 요구에 맞는 데이터를 제공.

### 3. 성능 요구 사항
프론트엔드 성능 최적화는 백엔드 성능에도 영향을 미칠 수 있습니다.

* 캐싱: 자주 변경되지 않는 데이터에 대해 백엔드에서 캐싱을 적용하여 응답 시간을 줄일 수 있습니다.
    * HTTP 캐싱 헤더: 클라이언트와 서버 간의 데이터 전송을 최적화.
    * Redis: 백엔드에서 자주 조회되는 데이터를 캐시하여 데이터베이스 부하를 줄임.

* 로드 밸런싱 및 스케일링: 트래픽이 많은 프론트엔드 애플리케이션은 백엔드 서버의 로드 밸런싱 및 자동 스케일링을 필요로 합니다.
    * AWS Elastic Load Balancing (ELB): 트래픽을 여러 서버로 분산.
    * Kubernetes: 컨테이너화된 애플리케이션의 자동 스케일링 및 배포.

### 4. 보안 고려 사항
프론트엔드와 백엔드 간의 통신은 보안 관점에서도 중요한 영향을 미칩니다.

* 인증 및 인가: 프론트엔드에서 사용할 인증 방식에 따라 백엔드 아키텍처가 영향을 받을 수 있습니다.
    * JWT (JSON Web Token): 토큰 기반 인증을 통해 무상태(stateless) 인증을 구현.
    * OAuth: 소셜 로그인이나 권한 위임을 위한 표준 프로토콜.

* CORS (Cross-Origin Resource Sharing): 클라이언트와 서버가 다른 도메인에 있을 때, 서버에서 CORS 설정을 통해 허용된 도메인만 접근 가능하게 설정해야 합니다.

### 5. 개발 및 배포 효율성
프론트엔드와 백엔드의 개발 속도 및 효율성을 높이기 위해 통합된 개발 환경이 필요할 수 있습니다.

* 모노레포(Monorepo): 프론트엔드와 백엔드를 하나의 리포지토리에서 관리하여 일관된 빌드 및 배포 파이프라인을 구축.
    * Nx: 모노레포 관리 도구로, Angular, React, Node.js 등 다양한 기술 스택을 지원.
    * Lerna: JavaScript 프로젝트를 위한 모노레포 관리 도구.

* CI/CD 파이프라인: 프론트엔드와 백엔드 모두를 포함하는 통합된 CI/CD 파이프라인을 통해 자동화된 테스트와 배포를 구현.
    * GitHub Actions: 리포지토리의 이벤트에 따라 다양한 작업을 자동으로 실행.
    * Jenkins: 플러그인을 통해 다양한 빌드 및 배포 작업을 자동화.

### 결론
프론트엔드 기술 선택은 백엔드 아키텍처에 여러 방면에서 영향을 미칠 수 있습니다. 통신 방식, 데이터 처리, 성능 최적화, 보안, 개발 및 배포 효율성 등의 측면에서 프론트엔드 요구 사항을 충족하기 위해 백엔드 아키텍처를 적절히 설계하는 것이 중요합니다. 이를 통해 일관된 사용자 경험과 효율적인 시스템 운영을 보장할 수 있습니다.