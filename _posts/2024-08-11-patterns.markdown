---
layout: post
title:  "patterns"
date:   2024-08-11 11:32:00 +0900
categories: patterns
---
전략 패턴(Strategy Pattern)은 객체지향 설계에서 사용하는 행동 패턴 중 하나로, 알고리즘을 정의하고 각각의 알고리즘을 캡슐화하여 상호 교환이 가능하도록 만드는 패턴입니다. 이 패턴을 사용하면 클라이언트 코드와 알고리즘을 분리할 수 있어 코드의 유연성과 확장성을 높일 수 있습니다.

# 주요 개념:
Context(문맥): 클라이언트가 사용하는 인터페이스를 정의합니다. Context는 Strategy 객체를 포함하고, 이를 통해 특정 전략을 실행합니다.

Strategy(전략): 공통 인터페이스 또는 추상 클래스로, 알고리즘의 공통된 메서드를 정의합니다. 각기 다른 전략(알고리즘)은 이 인터페이스를 구현하거나 이 클래스를 상속받습니다.

Concrete Strategy(구체적인 전략): Strategy 인터페이스를 구현하여 실제 알고리즘을 정의하는 클래스들입니다. 여러 개의 Concrete Strategy가 존재할 수 있으며, 상황에 따라 이들을 선택하여 사용할 수 있습니다.

# 장점:
유연성: 알고리즘을 런타임에 쉽게 교체할 수 있습니다.
유지보수성: 알고리즘을 추가하거나 수정할 때 기존 코드를 변경할 필요가 없습니다. 새로운 알고리즘을 추가하면 됩니다.
단일 책임 원칙(SRP) 준수: 각각의 알고리즘은 독립된 클래스로 관리되기 때문에 코드가 더 깔끔해지고 관리하기 쉬워집니다.

# 단점:
복잡성 증가: 전략을 추가할 때마다 클래스 파일이 늘어날 수 있으며, 코드의 복잡성이 증가할 수 있습니다.
클라이언트의 책임 증가: 어떤 전략을 사용할지 클라이언트가 선택해야 하는 경우가 많아 클라이언트 코드가 복잡해질 수 있습니다.

# 예시:
온라인 상점에서 다양한 할인 전략을 사용할 수 있는 경우를 생각해 볼 수 있습니다. 할인 전략은 다양한 방식으로 구현될 수 있으며, 전략 패턴을 사용하면 이들 알고리즘을 쉽게 교체하거나 추가할 수 있습니다.