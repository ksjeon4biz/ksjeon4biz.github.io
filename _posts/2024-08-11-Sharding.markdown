---
layout: post
title:  "Sharding"
date:   2024-08-11 16:44:00 +0900
categories: architecture
---

샤딩(Sharding)은 대규모 데이터베이스 시스템에서 데이터를 여러 개의 작은 데이터베이스로 분할하여 관리하는 기법을 말합니다. 샤딩을 통해 데이터베이스의 성능과 확장성을 향상시킬 수 있으며, 특히 매우 많은 양의 데이터를 다루는 애플리케이션에서 유용합니다.

## 주요 개념:
1. 샤드(Shard): 각 샤드는 전체 데이터베이스의 일부분을 담고 있는 독립된 데이터베이스입니다. 샤딩된 데이터베이스에서 각 샤드는 물리적으로 다른 서버에 위치할 수 있으며, 이로 인해 데이터베이스의 부하를 여러 서버로 분산할 수 있습니다.

1. 샤딩 키(Sharding Key): 데이터를 샤드에 나누는 기준이 되는 키입니다. 일반적으로 테이블의 특정 컬럼 값에 기반하여 데이터를 분할합니다. 예를 들어, 사용자 ID, 지역, 또는 해시 값 등이 샤딩 키로 사용될 수 있습니다.

1. 수평 샤딩(Horizontal Sharding): 데이터를 행(row) 단위로 분할하는 방식입니다. 각 샤드는 동일한 스키마를 가지지만 서로 다른 데이터 행들을 저장합니다. 대부분의 경우, 샤딩은 수평 샤딩을 의미합니다.

1. 수직 샤딩(Vertical Sharding): 테이블을 열(column) 단위로 분할하는 방식입니다. 각 샤드는 동일한 데이터의 서로 다른 속성(컬럼)을 저장합니다. 예를 들어, 사용자의 프로필 정보는 한 샤드에, 사용자의 구매 이력은 다른 샤드에 저장될 수 있습니다.

## 샤딩의 장점:
1. 확장성(Scalability): 데이터를 여러 샤드로 분할함으로써 더 많은 서버를 추가해 데이터베이스를 수평적으로 확장할 수 있습니다. 이는 특히 데이터가 매우 큰 시스템에서 성능을 유지하는 데 필수적입니다.

1. 성능 향상: 데이터 읽기/쓰기 작업이 여러 샤드로 분산되므로 각 서버의 부하가 감소하고, 이에 따라 전체 시스템의 성능이 향상될 수 있습니다.

1. 데이터 격리: 특정 샤드에서 문제가 발생하더라도 다른 샤드에 영향을 미치지 않아 시스템의 가용성이 향상됩니다.

## 샤딩의 단점:
1. 복잡성 증가: 데이터베이스를 여러 개로 분리하면서 데이터 일관성을 유지하고 트랜잭션을 관리하는 일이 복잡해집니다.

1. 운영 비용 증가: 여러 데이터베이스 서버를 운영하고 관리해야 하므로 운영 비용이 증가할 수 있습니다.

1. 균형 문제: 샤딩 키를 잘못 선택하면 샤드 간의 데이터 불균형이 발생하여 일부 샤드에만 과도한 부하가 집중될 수 있습니다.

## 예시:
예를 들어, 1억 명의 사용자가 있는 소셜 네트워크를 운영한다고 가정해 보겠습니다. 모든 사용자 데이터를 하나의 데이터베이스에 저장하면 성능이 저하될 수 있습니다. 샤딩을 적용하여 사용자 ID를 기반으로 데이터를 분할할 수 있습니다.

* 사용자 ID 1부터 50,000,000까지의 데이터를 Shard A에 저장.
* 사용자 ID 50,000,001부터 100,000,000까지의 데이터를 Shard B에 저장.

이렇게 하면 두 개의 샤드가 독립적으로 데이터를 처리할 수 있어 전체 시스템의 성능이 개선됩니다.

## 샤딩을 적용하는 경우:
샤딩은 일반적으로 매우 큰 규모의 데이터를 다루거나, 많은 트래픽을 처리해야 하는 시스템에서 주로 사용됩니다. 예를 들어, 대형 전자상거래 사이트, 소셜 네트워크, 금융 시스템 등이 샤딩을 통해 성능을 최적화할 수 있습니다.